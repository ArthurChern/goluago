package internal

import (
	. "testing"
)

func TestOpenClose(t *T) {
	l := Open()
	l.Close()
}

func TestStackBasic(t *T) {
	l := Open()
	defer l.Close()

	n := l.GetTop()
	if n != 0 {
		t.Error(n)
	}

	stack := []int{5, 5, 0}
	for i, x := range stack {
		l.PushInteger(x)
		n = l.GetTop()
		if n != i+1 {
			t.Error("expected", i+1, "got", n)
		}
	}

	eqs := []struct {
		i1, i2 int
		eq     bool
	}{
		{-1, -2, false},
		{-2, -3, true},
		{1, 2, true},
		{2, 3, false},
	}
	for _, x := range eqs {
		if l.Equal(x.i1, x.i2) != x.eq {
			t.Error("expected", x)
		}
	}
}

func TestRunPrecompiled(t *T) {
	cases := []struct {
		chunk string
		stack []int
	}{
		// "return 2+3", generated by '../gen_chunk.lua'
		{"\x1bLuaQ\x00\x01\x04\x04\x04\x08\x00\x01\x00\x00\x00\x00\x00" +
			"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x02\x03\x00\x00\x00" +
			"\x01\x00\x00\x00\x1e\x00\x00\x01\x1e\x00\x80\x00\x01\x00\x00" +
			"\x00\x03\x00\x00\x00\x00\x00\x00\x14@\x00\x00\x00\x00\x03\x00" +
			"\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00" +
			"\x00\x00\x00\x00\x00\x00\x00",
			[]int{5}},
	}

	for i, c := range cases {
		l := Open()

		r := l.Loadbuffer([]byte(c.chunk), "") //TODO: chunk name is currently ignored

		if r != 0 {
			t.Error("case", i, "got error", r, "when loading")
		}

		l.Call(0, len(c.stack)) //TODO: also LUA_MULTRET
		if l.GetTop() != len(c.stack) {
			t.Error("case", i, "unexpected returned stack size", l.GetTop())
		}

		for j := range c.stack {
			l.PushInteger(c.stack[j])
			if !l.Equal(1+j, -1) {
				t.Error("case", i, "wrong value at stack position", j)
			}
		}
		l.Close()
	}
}
